namespace org.jruby.ir.persistence.flat;

table IRScopeFlat {
    name:string;
    //lexicalParent:IRScopeFlat;
    nestedClosures:[IRClosureFlat];
    lexicalChildren:[IRScopeFlat];
    instrs:[InstrFlat];
    tempVariables:short;
    acceptsKeywordArguments:bool;
}

table IRClosureFlat {
    scope:IRScopeFlat;
}

union OperandUnion {
    StringLiteralFlat, FrozenStringFlat, TemporaryVariableFlat, CurrentScopeFlat, ScopeModuleFlat, SelfFlat
}

table OperandFlat {
    operand:OperandUnion;
}

table StringLiteralFlat {
    frozenString:FrozenStringFlat;
}

table FrozenStringFlat {
    bytes:[byte];
    encoding:string;
    str:string;
    coderange:int;
    file:string;
    line:int;
}

table TemporaryVariableFlat {
    offset:int;
}

table CurrentScopeFlat {
    dummy:byte;
}

table ScopeModuleFlat {
     dummy:byte;
}

table SelfFlat {
     dummy:byte;
}

union InstrUnion {
    CopyFlat, ReceiveSelfFlat, LineNumberFlat, CallFlat, ReturnFlat, LoadImplicitClosureFlat, LoadFrameClosureFlat
}

table CopyFlat {
    dummy:byte;
}

table ReceiveSelfFlat {
    dummy:byte;
}

table LineNumberFlat {
    line:int;
}

table CallFlat {
    callType:int;
    name:string;
    argsCount:int;
    hasClosure:bool;
    canBeEval:bool;
    targetRequiresCallersBinding:bool;    // Does this call make use of the caller's binding?
    targetRequiresCallersFrame:bool;    // Does this call make use of the caller's frame?
    splatMap:[bool];
    potentiallyRefined:bool;
}

table ReturnFlat {
    dummy:byte;
}

table LoadImplicitClosureFlat {
    dummy:byte;
}

table LoadFrameClosureFlat {
    dummy:byte;
}

table InstrFlat {
    result:TemporaryVariableFlat;
    operands:[OperandFlat];
    instr:InstrUnion;
}

root_type IRScopeFlat;