fails:Array#sort returns a new array sorted based on comparing elements with <=>
fails:Array#sort does not affect the original Array
fails:Array#sort sorts already-sorted Arrays
fails:Array#sort sorts reverse-sorted Arrays
fails:Array#sort sorts Arrays that consist entirely of equal elements
fails:Array#sort sorts Arrays that consist mostly of equal elements
fails:Array#sort does not return self even if the array would be already sorted
fails:Array#sort properly handles recursive arrays
fails:Array#sort uses #<=> of elements in order to sort
fails:Array#sort does not deal with exceptions raised by unimplemented or incorrect #<=>
fails:Array#sort may take a block which is used to determine the order of objects a and b described as -1, 0 or +1
fails:Array#sort raises an error when a given block returns nil
fails:Array#sort does not call #<=> on contained objects when invoked with a block
fails:Array#sort does not call #<=> on elements when invoked with a block even if Array is large (Rubinius #412)
fails:Array#sort completes when supplied a block that always returns the same result
fails:Array#sort does not freezes self during being sorted
fails:Array#sort returns the specified value when it would break in the given block
fails:Array#sort uses the sign of Bignum block results as the sort result
fails:Array#sort compares values returned by block with 0
fails:Array#sort sorts an array that has a value shifted off without a block
fails:Array#sort sorts an array that has a value shifted off with a block
fails:Array#sort raises an error if objects can't be compared
fails:Array#sort handles a large array that has been pruned
fails:Array#sort does not return subclass instance on Array subclasses
fails:Array#sort! sorts array in place using <=>
fails:Array#sort! sorts array in place using block value if a block given
fails:Array#sort! returns self if the order of elements changed
fails:Array#sort! returns self even if makes no modification
fails:Array#sort! properly handles recursive arrays
fails:Array#sort! uses #<=> of elements in order to sort
fails:Array#sort! does not call #<=> on contained objects when invoked with a block
fails:Array#sort! does not call #<=> on elements when invoked with a block even if Array is large (Rubinius #412)
fails:Array#sort! completes when supplied a block that always returns the same result
fails:Array#sort! raises a RuntimeError on a frozen array
fails:Array#sort! returns the specified value when it would break in the given block
fails:Array#sort! makes some modification even if finished sorting when it would break in the given block
