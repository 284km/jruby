fails:Array#[] returns the element at index with [index]
fails:Array#[] returns the element at index from the end of the array with [-index]
fails:Array#[] returns count elements starting from index with [index, count]
fails:Array#[] returns count elements starting at index from the end of array with [-index, count]
fails:Array#[] returns the first count elements with [0, count]
fails:Array#[] returns the subarray which is independent to self with [index,count]
fails:Array#[] tries to convert the passed argument to an Integer using #to_int
fails:Array#[] returns the elements specified by Range indexes with [m..n]
fails:Array#[] returns elements specified by Range indexes except the element at index n with [m...n]
fails:Array#[] returns elements that exist if range start is in the array but range end is not with [m..n]
fails:Array#[] accepts Range instances having a negative m and both signs for n with [m..n] and [m...n]
fails:Array#[] returns the subarray which is independent to self with [m..n]
fails:Array#[] tries to convert Range elements to Integers using #to_int with [m..n] and [m...n]
fails:Array#[] returns the same elements as [m..n] and [m...n] with Range subclasses
fails:Array#[] returns nil for a requested index not in the array with [index]
fails:Array#[] returns [] if the index is valid but length is zero with [index, length]
fails:Array#[] returns nil if length is zero but index is invalid with [index, length]
fails:Array#[] returns [] if index == array.size with [index, length]
fails:Array#[] returns nil if index > array.size with [index, length]
fails:Array#[] returns nil if length is negative with [index, length]
fails:Array#[] returns nil if no requested index is in the array with [m..n]
fails:Array#[] returns nil if range start is not in the array with [m..n]
fails:Array#[] returns an empty array when m == n with [m...n]
fails:Array#[] returns an empty array with [0...0]
fails:Array#[] returns a subarray where m, n negatives and m < n with [m..n]
fails:Array#[] returns an array containing the first element with [0..0]
fails:Array#[] returns the entire array with [0..-1]
fails:Array#[] returns all but the last element with [0...-1]
fails:Array#[] returns [3] for [2..-1] out of [1, 2, 3]
fails:Array#[] returns an empty array when m > n and m, n are positive with [m..n]
fails:Array#[] returns an empty array when m > n and m, n are negative with [m..n]
fails:Array#[] does not expand array when the indices are outside of the array bounds
fails:Array#[] raises a RangeError when the start index is out of range of Fixnum
fails:Array#[] raises a RangeError when the length is out of range of Fixnum
fails:Array#[] with a subclass of Array returns a subclass instance with [n, m]
fails:Array#[] with a subclass of Array returns a subclass instance with [-n, m]
fails:Array#[] with a subclass of Array returns a subclass instance with [n..m]
fails:Array#[] with a subclass of Array returns a subclass instance with [n...m]
fails:Array#[] with a subclass of Array returns a subclass instance with [-n..-m]
fails:Array#[] with a subclass of Array returns a subclass instance with [-n...-m]
fails:Array#[] with a subclass of Array returns an empty array when m == n with [m...n]
fails:Array#[] with a subclass of Array returns an empty array with [0...0]
fails:Array#[] with a subclass of Array returns an empty array when m > n and m, n are positive with [m..n]
fails:Array#[] with a subclass of Array returns an empty array when m > n and m, n are negative with [m..n]
fails:Array#[] with a subclass of Array returns [] if index == array.size with [index, length]
fails:Array#[] with a subclass of Array returns [] if the index is valid but length is zero with [index, length]
fails:Array#[] with a subclass of Array does not call #initialize on the subclass instance
fails:Array.[] [] should return a new array populated with the given elements
fails:Array.[] when applied to a literal nested array, unpacks its elements into the containing array
fails:Array.[] when applied to a nested referenced array, unpacks its elements into the containing array
fails:Array.[] can unpack 2 or more nested referenced array
fails:Array.[] constructs a nested Hash for tailing key-value pairs
fails:Array.[] with a subclass of Array returns an instance of the subclass
fails:Array.[] with a subclass of Array does not call #initialize on the subclass instance
