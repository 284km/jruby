fails:Kernel#eval is a private method
fails:Kernel#eval is a module function
fails:Kernel#eval evaluates the code within
passes:Kernel#eval coerces an object to string
fails:Kernel#eval evaluates within the scope of the eval
fails:Kernel#eval evaluates such that consts are scoped to the class of the eval
passes:Kernel#eval finds a local in an enclosing scope
fails:Kernel#eval updates a local in an enclosing scope
fails:Kernel#eval updates a local in a surrounding block scope
fails:Kernel#eval updates a local in a scope above a surrounding block scope
fails:Kernel#eval updates a local in a scope above when modified in a nested block scope
fails:Kernel#eval finds locals in a nested eval
fails:Kernel#eval does not share locals across eval scopes
fails:Kernel#eval doesn't accept a Proc object as a binding
fails:Kernel#eval does not make Proc locals visible to evaluated code
fails:Kernel#eval allows a binding to be captured inside an eval
fails:Kernel#eval uses the same scope for local variables when given the same binding
fails:Kernel#eval allows creating a new class in a binding
fails:Kernel#eval allows creating a new class in a binding created by #eval
fails:Kernel#eval includes file and line information in syntax error
fails:Kernel#eval sets constants at the toplevel from inside a block
fails:Kernel#eval uses the filename of the binding if none is provided
fails:Kernel#eval does not alter the value of __FILE__ in the binding
fails:Kernel#eval uses the receiver as self inside the eval
fails:Kernel#eval does not pass the block to the method being eval'ed
fails:Kernel#eval returns from the scope calling #eval when evaluating 'return'
fails:Kernel#eval unwinds through a Proc-style closure and returns from a lambda-style closure in the closure chain
fails:Kernel#eval raises a LocalJumpError if there is no lambda-style closure in the chain
fails:Kernel#eval can be aliased
